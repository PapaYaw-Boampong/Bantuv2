# app/repositories/user_repository.py
from typing import List, Optional, Dict, Any
from sqlmodel import Session, select
from models.user import User
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
import uuid


class UserCrud:
    def __init__(self, db: AsyncSession):
        self.db = db

    def create(self, user_data: Dict[str, Any]) -> User:
        """
        Create a new user
        """
        user = User(**user_data)
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user

    def get_by_id(self, user_id: str) -> Optional[User]:
        """
        Get a user by ID
        """
        return self.db.get(User, user_id)

    def get_by_username(self, username: str) -> Optional[User]:
        """
        Get a user by username
        """
        statement = select(User).where(User.username == username)
        results = self.db.exec(statement)
        return results.first()

    def get_by_email(self, email: str) -> Optional[User]:
        """
        Get a user by email
        """
        statement = select(User).where(User.email == email)
        results = self.db.exec(statement)
        return results.first()

    def get_all(self, skip: int = 0, limit: int = 100) -> List[User]:
        """
        Get all users with pagination
        """
        statement = select(User).offset(skip).limit(limit)
        results = self.db.exec(statement)
        return results.all()

    def update(self, user_id: str, update_data: Dict[str, Any]) -> Optional[User]:
        """
        Update a user
        """
        user = self.get_by_id(user_id)
        if not user:
            return None

        # Update the user object with the new data
        for key, value in update_data.items():
            setattr(user, key, value)

        # Always update the updated_at timestamp
        user.updated_at = datetime.utcnow()

        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user

    def increment_contribution_stats(
            self,
            user_id: str,
            is_accepted: bool = False,
            hours_speech: int = 0,
            sentences_translated: int = 0,
            tokens_produced: int = 0,
            points: int = 0
    ) -> Optional[User]:
        """
        Increment a user's contribution statistics
        """
        user = self.get_by_id(user_id)
        if not user:
            return None

        # Increment contribution count
        user.contribution_count += 1

        # Increment accepted contributions if applicable
        if is_accepted:
            user.accepted_contributions += 1

        # Update other statistics
        user.total_hours_speech += hours_speech
        user.total_sentences_translated += sentences_translated
        user.total_tokens_produced += tokens_produced
        user.total_points += points

        # Update timestamp
        user.updated_at = datetime.utcnow()

        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user

    def delete(self, user_id: str) -> bool:
        """
        Delete a user
        """
        user = self.get_by_id(user_id)
        if not user:
            return False

        self.db.delete(user)
        self.db.commit()
        return True

    def search_users(
            self,
            username: Optional[str] = None,
            email: Optional[str] = None,
            is_active: Optional[bool] = None,
            min_reputation: Optional[float] = None,
            skip: int = 0,
            limit: int = 100
    ) -> List[User]:
        """
        Search for users with various filters
        """
        query = select(User)

        # Apply filters if provided
        if username:
            query = query.where(User.username.contains(username))

        if email:
            query = query.where(User.email.contains(email))

        if is_active is not None:
            query = query.where(User.is_active == is_active)

        if min_reputation is not None:
            query = query.where(User.reputation_score >= min_reputation)

        # Apply pagination
        query = query.offset(skip).limit(limit)

        results = self.db.exec(query)
        return list(results.all())

    def calculate_reputation_score(self, user_id: str) -> Optional[float]:
        """
        Calculate and update a user's reputation score based on their contributions
        """
        user = self.get_by_id(user_id)
        if not user:
            return None

        # Simple reputation formula: (accepted / total) * (1 + log(total))
        # This rewards both quality (acceptance rate) and quantity (total contributions)
        if user.contribution_count > 0:
            acceptance_rate = user.accepted_contributions / user.contribution_count
            volume_factor = 1 + (user.contribution_count / 10)  # Simplified log calculation

            # Calculate reputation score (0-100 scale)
            user.reputation_score = min(100, acceptance_rate * volume_factor * 20)
        else:
            user.reputation_score = 0

        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user.reputation_score
